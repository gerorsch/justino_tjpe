version: '3.9'

services:
  # ───────── Banco de Dados ─────────
  postgres:
    image: postgres:13
    container_name: rag_postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-rag_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-rag_password}
      POSTGRES_DB: ${POSTGRES_DB:-rag_database}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${POSTGRES_USER:-rag_user}"]
      interval: 10s
      retries: 5
      start_period: 5s
    ports:
      - "5432:5432"
    networks:
      - network

  # ───────── Search Engine ─────────
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.15.1
    container_name: rag_elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx1g"
      - network.host=0.0.0.0
      - http.port=9200
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 40s
    networks:
      - network

  # ───────── Backend API ─────────
  fastapi:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: rag_api
    restart: always
    env_file:
      - .env
    working_dir: /app
    command: uvicorn main:app --host 0.0.0.0 --port 8001 --reload
    ports:
      - "8001:8001"
    environment:
      - ELASTICSEARCH_HOST=http://elasticsearch:9200
      - POSTGRES_HOST=postgres
      - POSTGRES_DB=${POSTGRES_DB:-rag_database}
      - POSTGRES_USER=${POSTGRES_USER:-rag_user}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-rag_password}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - LLM_API_URL=https://api.openai.com/v1/chat/completions
    volumes:
      # Volumes temporários para uploads/outputs
      - uploads_vol:/tmp/uploads
      - outputs_vol:/tmp/outputs
      - ./backend:/app
    depends_on:
      postgres:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
    networks:
      - network

  # ───────── Frontend ─────────
  streamlit:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: rag_app
    restart: always
    ports:
      - "8501:8501"
    environment:
      - API_URL=http://fastapi:8001
      - DEBUG_MODE=true
      - ELASTICSEARCH_HOST=http://elasticsearch:9200
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
    volumes:
      # Volumes temporários compartilhados
      - uploads_vol:/tmp/uploads
      - outputs_vol:/tmp/outputs
      - ./frontend:/app
      - ./frontend/.streamlit:/app/.streamlit:ro
    depends_on:
      fastapi:
        condition: service_started
      elasticsearch:
        condition: service_healthy
    networks:
      - network
    command: streamlit run streamlit_app.py --server.port 8501 --server.address 0.0.0.0 --server.headless true

  # ───────── Proxy Reverso ─────────
  nginx:
    build:
      context: .
      dockerfile: Dockerfile.nginx
    container_name: rag_proxy
    ports:
      - "80:80"
    depends_on:
      - streamlit
      - fastapi
    networks:
      - network
    restart: always


networks:
  network:
    driver: bridge

volumes:
  uploads_vol:
    driver: local
  outputs_vol:
    driver: local
  postgres_data:
    driver: local
  elasticsearch_data:
    driver: local