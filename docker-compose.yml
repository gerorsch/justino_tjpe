version: '3.9'

services:
  postgres:
    image: postgres:13
    container_name: airflow_postgres
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    volumes:
      - postgres-db-volume:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]
      interval: 10s
      retries: 5
      start_period: 5s
    ports:
      - "5432:5432"
    networks:
      - network

  redis:
    image: redis:7.2-bookworm
    container_name: airflow_redis
    expose:
      - 6379
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 30s
      retries: 50
      start_period: 30s
    networks:
      - network

  mongodb:
    image: mongo:6
    container_name: rag_mongodb
    ports:
      - "27017:27017"
    volumes:
      - mongo_data:/data/db
    networks:
      - network

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.15.1
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx1g"
      - network.host=0.0.0.0
      - http.port=9200
    ports:
      - "9200:9200"
      - "9300:9300"
    volumes:
      - elastic-search-data:/usr/share/elasticsearch/data
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 40s
    networks:
      - network

  # ─────────────────── Airflow ────────────────────
  airflow-init:
      build: ./airflow
      container_name: airflow_init
      entrypoint: ["/entrypoint"]
      command: ["airflow", "db", "init"]
      environment:
        AIRFLOW__CORE__EXECUTOR: LocalExecutor
        AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
        _AIRFLOW_DB_MIGRATE: 'true'
        _AIRFLOW_WWW_USER_CREATE: 'true'
        _AIRFLOW_WWW_USER_USERNAME: airflow
        _AIRFLOW_WWW_USER_PASSWORD: airflow
        AIRFLOW__METRICS__STATSD_ON: 'True'
        AIRFLOW__METRICS__STATSD_HOST: statsd-exporter
        AIRFLOW__METRICS__STATSD_PORT: '9125'
      volumes:
        - ./airflow:/opt/airflow
      user: "0:0"
      depends_on:
        postgres:
          condition: service_healthy
      networks:
        - network

  airflow-webserver:
    build: ./airflow
    container_name: airflow_webserver
    command: webserver
    restart: always
    ports:
      - "8080:8080"
    environment:
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
      AIRFLOW__CORE__FERNET_KEY: ''
      AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
      AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
      AIRFLOW__API__AUTH_BACKENDS: 'airflow.api.auth.backend.basic_auth'
      # Metrics via StatsD
      AIRFLOW__METRICS__STATSD_ON: 'True'
      AIRFLOW__METRICS__STATSD_HOST: statsd-exporter
      AIRFLOW__METRICS__STATSD_PORT: '9125'
    volumes:
      - ./airflow/dags:/opt/airflow/dags
      - ./airflow/logs:/opt/airflow/logs
      - ./airflow/plugins:/opt/airflow/plugins
    depends_on:
      postgres:
        condition: service_healthy
      airflow-init:
        condition: service_completed_successfully
    networks:
      - network

  airflow-scheduler:
    build: ./airflow
    container_name: airflow_scheduler
    command: scheduler
    restart: always
    environment:
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
      # Metrics via StatsD
      AIRFLOW__METRICS__STATSD_ON: 'True'
      AIRFLOW__METRICS__STATSD_HOST: statsd-exporter
      AIRFLOW__METRICS__STATSD_PORT: '9125'
    volumes:
      - ./airflow/dags:/opt/airflow/dags
      - ./airflow/logs:/opt/airflow/logs
      - ./airlow/plugins:/opt/airflow/plugins
    depends_on:
      postgres:
        condition: service_healthy
      airflow-init:
        condition: service_completed_successfully
    networks:
      - network

  airflow-triggerer:
    build: ./airflow
    container_name: airflow_triggerer
    command: triggerer
    restart: always
    environment:
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
      # Metrics via StatsD
      AIRFLOW__METRICS__STATSD_ON: 'True'
      AIRFLOW__METRICS__STATSD_HOST: statsd-exporter
      AIRFLOW__METRICS__STATSD_PORT: '9125'
    volumes:
      - ./airflow/dags:/opt/airflow/dags
      - ./airflow/logs:/opt/airflow/logs
      - ./airflow/plugins:/opt/airflow/plugins
    depends_on:
      postgres:
        condition: service_healthy
      airflow-init:
        condition: service_completed_successfully
    networks:
      - network

  # ───────── RAG API + Frontend ─────────
  fastapi:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: fastapi
    restart: always
    env_file:
      - .env
    working_dir: /app
    command: uvicorn main:app --host 0.0.0.0 --port 8001
    ports:
      - "8001:8001"
    environment:
      - ELASTICSEARCH_HOST=http://elasticsearch:9200
      - POSTGRES_HOST=postgres
      - POSTGRES_DB=airflow
      - POSTGRES_USER=airflow
      - POSTGRES_PASSWORD=airflow
      - MONGO_URI=mongodb://mongodb:27017
      - LLM_API_URL=https://api.openai.com/v1/chat/completions
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
    volumes:
      - uploads_vol:/tmp/uploads
      - outputs_vol:/tmp/outputs
      - ./data:/app/data
    depends_on:
      postgres:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
      mongodb:
        condition: service_started
    networks:
      - network

  streamlit:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: rag_streamlit
    restart: always
    ports:
      - "8501:8501"
    environment:
      - API_URL=http://fastapi:8001
      - ELASTICSEARCH_HOST=http://elasticsearch:9200
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
    volumes:
      - uploads_vol:/tmp/uploads
      - outputs_vol:/tmp/outputs
      - ./frontend:/app
      - ./frontend/.streamlit:/app/.streamlit:ro
    depends_on:
      fastapi:
        condition: service_started
      elasticsearch:
        condition: service_healthy
    networks:
      - network


  nginx:
    image: nginx:alpine
    container_name: rag_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - streamlit
      - fastapi
      - airflow-webserver
      - grafana
    networks:
      - network
    restart: always

  # ───────── Monitoramento ─────────
  statsd-exporter:
    image: prom/statsd-exporter:latest
    ports:
      - "9125:9125/udp"   # ingestão StatsD
      - "9102:9102"       # endpoint HTTP /metrics
    networks:
      - network

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    ports:
      - "9090:9090"
    depends_on:
      - statsd-exporter
    networks:
      - network

  grafana:
    image: grafana/grafana
    container_name: grafana
    restart: always
    ports:
      - "3000:3000"
    env_file:
      - .env
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_SERVER_ROOT_URL=https://grafana.seudominio.com
    volumes:
      - grafana-storage:/var/lib/grafana
      - grafana-plugins:/var/lib/grafana/plugins
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
    depends_on:
      postgres:
        condition: service_healthy
      prometheus:
        condition: service_started
    networks:
      - network  

networks:
  network:
    driver: bridge

volumes:
  uploads_vol:
  outputs_vol:
  postgres-db-volume:
  mongo_data:
  elastic-search-data:
  grafana-storage:
  grafana-plugins:
