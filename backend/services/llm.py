import os
from dotenv import load_dotenv
from typing import List, Optional, Callable
import anthropic

load_dotenv()

# Par√¢metros de configura√ß√£o
LLM_MODEL = os.getenv("LLM_MODEL", "claude-sonnet-4-20250514")
LLM_TEMPERATURE = float(os.getenv("LLM_TEMPERATURE", "0.3"))
LLM_MAX_TOKENS = int(os.getenv("LLM_MAX_TOKENS", "2048"))

# Inicializa o client da Anthropic
client = anthropic.Anthropic(api_key=os.getenv("ANTHROPIC_API_KEY"))

def _extract_text_from_response(response_content) -> str:
    """
    Extrai o texto da resposta do Claude de forma segura.
    A API do Anthropic retorna response.content como uma lista de TextBlocks.
    """
    if not response_content:
        return ""
    
    # CORRE√á√ÉO: Verificar se √© uma string diretamente
    if isinstance(response_content, str):
        return response_content
    
    # CORRE√á√ÉO: Se √© lista de TextBlocks (caso comum)
    if isinstance(response_content, list):
        text_parts = []
        for block in response_content:
            if hasattr(block, 'text'):
                # Objeto TextBlock com atributo text
                text_parts.append(str(block.text))
            elif isinstance(block, dict) and 'text' in block:
                # Dicion√°rio com chave text
                text_parts.append(str(block['text']))
            elif isinstance(block, str):
                # String direta
                text_parts.append(block)
            else:
                # Converte para string e loga para debug
                text_str = str(block)
                print(f"‚ö†Ô∏è Tipo inesperado de bloco: {type(block)} - {text_str[:100]}")
                text_parts.append(text_str)
        
        result = ''.join(text_parts)
        # CORRE√á√ÉO: Normaliza quebras de linha
        result = result.replace('\\n', '\n').replace('\\r', '')
        return result
    
    # Fallback final
    result = str(response_content)
    result = result.replace('\\n', '\n').replace('\\r', '')
    return result

async def _call_llm(prompt: str, on_progress: Optional[Callable[[str], None]] = None) -> str:
    """
    Chama a API da Anthropic (Claude) e retorna a resposta do modelo.
    """
    try:
        if on_progress:
            on_progress("ü§ñ Consultando Claude...")
            
        response = client.messages.create(
            model=LLM_MODEL,
            max_tokens=LLM_MAX_TOKENS,
            temperature=LLM_TEMPERATURE,
            messages=[
                {"role": "user", "content": prompt}
            ]
        )
        
        if on_progress:
            on_progress("üìù Processando resposta...")
        
        # CORRE√á√ÉO: Extrai o texto corretamente da resposta
        text = _extract_text_from_response(response.content)
        return text.strip()
        
    except Exception as e:
        error_msg = f"Erro na chamada da API Anthropic: {e}"
        print(error_msg)
        if on_progress:
            on_progress(f"‚ùå {error_msg}")
        return f"Erro na gera√ß√£o de conte√∫do: {str(e)}"

async def gerar_resposta_llm(pergunta: str, documentos: List[dict]) -> str:
    """
    Gera uma resposta gen√©rica para uma pergunta, utilizando o texto dos documentos como contexto.
    """
    try:
        context = "\n\n".join([doc.get("relatorio") or doc.get("text", "") for doc in documentos])
        prompt = f"Contexto:\n{context}\n\nPergunta: {pergunta}\nResposta:"
        return await _call_llm(prompt)
    except Exception as e:
        print(f"Erro em gerar_resposta_llm: {e}")
        return f"Erro ao gerar resposta: {str(e)}"

async def gerar_sentenca_llm(
    relatorio: str, 
    docs: List[dict], 
    instrucoes_usuario: str = "", 
    on_progress: Optional[Callable[[str], None]] = None,
    **kwargs
) -> str:
    """
    Gera a fundamenta√ß√£o e o dispositivo de uma senten√ßa judicial com base no relat√≥rio e em documentos de refer√™ncia.
    
    Args:
        relatorio: O relat√≥rio do processo
        docs: Lista de documentos de refer√™ncia
        instrucoes_usuario: Instru√ß√µes adicionais do usu√°rio (opcional)
        on_progress: Callback para updates de progresso (opcional)
        **kwargs: Par√¢metros adicionais (ignorados, para compatibilidade)
    """
    try:
        # Valida√ß√£o de entrada
        if not relatorio or not relatorio.strip():
            error_msg = "Erro: Relat√≥rio n√£o fornecido ou vazio."
            if on_progress:
                on_progress(f"‚ùå {error_msg}")
            return error_msg
        
        if not docs:
            error_msg = "Erro: Nenhum documento de refer√™ncia fornecido."
            if on_progress:
                on_progress(f"‚ùå {error_msg}")
            return error_msg
        
        if on_progress:
            on_progress("üìö Preparando documentos de refer√™ncia...")
        
        # Constr√≥i os exemplos dos documentos
        exemplos = []
        for i, d in enumerate(docs, 1):
            exemplo = f"Exemplo {i}:\n"
            
            if d.get('relatorio'):
                exemplo += f"Relat√≥rio: {d['relatorio'][:500]}...\n\n"
            
            if d.get('fundamentacao'):
                exemplo += f"Fundamenta√ß√£o: {d['fundamentacao'][:1000]}...\n\n"
            
            if d.get('dispositivo'):
                exemplo += f"Dispositivo: {d['dispositivo'][:500]}...\n"
            
            exemplos.append(exemplo)
        
        contexto = "\n\n---\n\n".join(exemplos)

        # Adiciona as instru√ß√µes do usu√°rio se fornecidas
        instrucoes_adicionais = ""
        if instrucoes_usuario and instrucoes_usuario.strip():
            instrucoes_adicionais = f"\n\n### INSTRU√á√ïES ADICIONAIS DO USU√ÅRIO:\n{instrucoes_usuario.strip()}\n"

        if on_progress:
            on_progress("‚úçÔ∏è Montando prompt da senten√ßa...")

        prompt = f"""
### CONTEXTO
Voc√™ √© um assistente judicial especializado na elabora√ß√£o de senten√ßas. Com base no relat√≥rio do processo e nos documentos de refer√™ncia fornecidos, voc√™ deve gerar uma senten√ßa judicial completa. Siga rigorosamente a estrutura e requisitos abaixo, mas N√ÉO inclua os t√≠tulos das se√ß√µes (como 'Fundamenta√ß√£o', 'M√©rito', 'Dispositivo', etc.) na resposta final. Apenas escreva o texto corrido da senten√ßa, respeitando a ordem l√≥gica das se√ß√µes, mas sem indicar seus t√≠tulos explicitamente. A seguir h√° exemplos de senten√ßas judiciais com relat√≥rio, fundamenta√ß√£o e dispositivo:

{contexto}

Agora, dado o NOVO RELAT√ìRIO abaixo, gere a fundamenta√ß√£o e o dispositivo:

NOVO RELAT√ìRIO:
{relatorio}
{instrucoes_adicionais}
## ESTRUTURA DA SENTEN√áA

### 1. QUEST√ïES PRELIMINARES
- Analise o processo e identifique se h√° quest√µes preliminares suscitadas na contesta√ß√£o.
- Se houver preliminares, desenvolva a fundamenta√ß√£o para cada uma delas separadamente.
- Se n√£o houver preliminares, inicie com a frase: "Ausentes quest√µes preliminares, passo ao m√©rito."

### 2. M√âRITO
- Inicie afirmando claramente o(s) fato(s) que constitui(em) a causa de pedir do autor.
- Em seguida, apresente o principal argumento do r√©u em sua defesa.
- Desenvolva a fundamenta√ß√£o com base nos documentos de refer√™ncia, analisando:
  - Os fatos comprovados nos autos
  - As provas produzidas
  - A legisla√ß√£o aplic√°vel
  - A jurisprud√™ncia pertinente
  - A doutrina relevante

#### REGRAS IMPORTANTES PARA A FUNDAMENTA√á√ÉO:
- As cita√ß√µes de lei, doutrina ou jurisprud√™ncia devem ser reproduzidas EXATAMENTE como constam nos documentos de refer√™ncia, sem altera√ß√µes.
- A argumenta√ß√£o deve ser coerente, l√≥gica e completa.
- Utilize linguagem t√©cnica-jur√≠dica apropriada.
- Analise todos os pedidos formulados na inicial.

### 3. DISPOSITIVO
- Elabore o dispositivo da senten√ßa, decidindo sobre todos os pedidos.
- Fixe os honor√°rios advocat√≠cios conforme crit√©rios do art. 85 do CPC.

### 4. CONCLUS√ÉO OBRIGAT√ìRIA
Ap√≥s o dispositivo e a condena√ß√£o em honor√°rios, encerre a senten√ßa com EXATAMENTE o seguinte texto, sem nenhuma altera√ß√£o:

"Opostos embargos de declara√ß√£o com efeito modificativo, intime-se a parte embargada para, querendo, manifestar-se no prazo de 05 (cinco) dias. (art. 1.023, ¬ß 2¬∫, do CPC/2015), e decorrido o prazo, com ou sem manifesta√ß√£o, voltem conclusos. 
Na hip√≥tese de interposi√ß√£o de recurso de apela√ß√£o, intime-se a parte apelada para apresentar contrarraz√µes (art. 1010, ¬ß1¬∫, do CPC/2015). Havendo alega√ß√£o ‚Äì em sede de contrarraz√µes - de quest√µes resolvidas na fase de conhecimento as quais n√£o comportaram agravo de instrumento, intime-se a parte adversa (recorrente) para, em 15 (quinze) dias, manifestar-se a respeito delas (art. 1.009, ¬ß¬ß 1¬∫ e 2¬∫, do CPC/2015). Havendo interposi√ß√£o de apela√ß√£o adesiva, intime-se a parte apelante para contrarraz√µes, no prazo de 15 (quinze) dias (art. 1010, ¬ß2¬∫, do CPC/2015). Em seguida, com ou sem resposta, sigam os autos ao e. Tribunal de Justi√ßa do Estado de Pernambuco, com os cumprimentos deste Ju√≠zo (art. 1010, ¬ß3¬∫, do CPC/2015).
Ap√≥s o tr√¢nsito em julgado, nada mais sendo requerido, arquivem-se os autos, com as cautelas de estilo, independentemente de nova determina√ß√£o.
Intimem-se, atentando-se para a regra prevista no art.346 do CPC/2015.
Comunica√ß√µes processuais necess√°rias.
Cumpra-se.
Recife-PE, data da assinatura digital.

Maria Bet√¢nia Martins da Hora

Ju√≠za de Direito"

## INSTRU√á√ïES FINAIS
- Leia atentamente o relat√≥rio e todos os documentos de refer√™ncia antes de iniciar a reda√ß√£o.
- Siga rigorosamente a estrutura indicada.
- Certifique-se de que o texto final est√° coeso, coerente e tecnicamente preciso.
- N√£o omita nenhum dos elementos obrigat√≥rios da senten√ßa.
- As cita√ß√µes devem ser exatamente iguais √†s dos documentos de refer√™ncia.
"""
        
        if on_progress:
            on_progress("üéØ Gerando senten√ßa...")
        
        resultado = await _call_llm(prompt, on_progress)
        
        if on_progress:
            on_progress("‚úÖ Senten√ßa gerada com sucesso!")
        
        return resultado
        
    except Exception as e:
        error_msg = f"Erro na gera√ß√£o da senten√ßa: {str(e)}"
        print(error_msg)
        if on_progress:
            on_progress(f"‚ùå {error_msg}")
        return f"Erro ao gerar senten√ßa: {str(e)}"