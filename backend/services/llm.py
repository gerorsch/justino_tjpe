import os
from dotenv import load_dotenv
from typing import List, Optional, Callable
from difflib import SequenceMatcher
import anthropic

load_dotenv()

LLM_MODEL = os.getenv("LLM_MODEL", "claude-sonnet-4-20250514")
LLM_TEMPERATURE = float(os.getenv("LLM_TEMPERATURE", "0.3"))
LLM_MAX_TOKENS = int(os.getenv("LLM_MAX_TOKENS", "2048"))

client = anthropic.Anthropic(api_key=os.getenv("ANTHROPIC_API_KEY"))


def _extract_text_from_response(response_content) -> str:
    if not response_content:
        return ""
    if isinstance(response_content, str):
        return response_content

    if isinstance(response_content, list):
        text_parts = []
        for block in response_content:
            if hasattr(block, 'text'):
                text_parts.append(str(block.text))
            elif isinstance(block, dict) and 'text' in block:
                text_parts.append(str(block['text']))
            elif isinstance(block, str):
                text_parts.append(block)
            else:
                text_parts.append(str(block))
        result = ''.join(text_parts)
        return result.replace('\\n', '\n').replace('\\r', '')

    result = str(response_content)
    return result.replace('\\n', '\n').replace('\\r', '')


def _is_redundant(new_text, existing_texts, threshold=0.85):
    for text in existing_texts:
        ratio = SequenceMatcher(None, new_text, text).ratio()
        if ratio > threshold:
            return True
    return False


def _extrair_trechos_relevantes(doc, max_chars=800):
    rel = doc.get("relatorio", "")[:300].strip()
    fund = doc.get("fundamentacao", "")[:max_chars].strip()
    disp = doc.get("dispositivo", "")[:300].strip()

    partes = []
    if rel:
        partes.append(f"Relat√≥rio: {rel}")
    if fund:
        partes.append(f"Fundamenta√ß√£o: {fund}")
    if disp:
        partes.append(f"Dispositivo: {disp}")
    return "\n".join(partes)


def _call_llm(prompt: str, on_progress: Optional[Callable[[str], None]] = None) -> str:
    try:
        if on_progress:
            on_progress("ü§ñ Consultando Claude...")
        response = client.messages.create(
            model=LLM_MODEL,
            max_tokens=LLM_MAX_TOKENS,
            temperature=LLM_TEMPERATURE,
            messages=[{"role": "user", "content": prompt}]
        )
        if on_progress:
            on_progress("üìù Processando resposta...")
        text = _extract_text_from_response(response.content)
        return text.strip()
    except Exception as e:
        error_msg = f"Erro na chamada da API Anthropic: {e}"
        print(error_msg)
        if on_progress:
            on_progress(f"‚ùå {error_msg}")
        return f"Erro na gera√ß√£o de conte√∫do: {str(e)}"


async def gerar_sentenca_llm(
    relatorio: str, 
    docs: List[dict], 
    instrucoes_usuario: str = "", 
    on_progress: Optional[Callable[[str], None]] = None,
    **kwargs
) -> str:
    try:
        if not relatorio or not relatorio.strip():
            error_msg = "Erro: Relat√≥rio n√£o fornecido ou vazio."
            if on_progress:
                on_progress(f"‚ùå {error_msg}")
            return error_msg

        if not docs:
            error_msg = "Erro: Nenhum documento de refer√™ncia fornecido."
            if on_progress:
                on_progress(f"‚ùå {error_msg}")
            return error_msg

        if on_progress:
            on_progress("üìö Preparando documentos de refer√™ncia...")

        docs_ordenados = sorted(docs, key=lambda d: d.get("rerank_score", 0), reverse=True)
        exemplos = []
        trechos_adicionados = []

        for i, doc in enumerate(docs_ordenados):
            trecho = _extrair_trechos_relevantes(doc)
            if not _is_redundant(trecho, trechos_adicionados):
                exemplos.append(f"Exemplo {i+1}:\n{trecho}\n")
                trechos_adicionados.append(trecho)
            if len(exemplos) >= 5:
                break

        contexto = "\n\n---\n\n".join(exemplos)

        instrucoes_adicionais = ""
        if instrucoes_usuario and instrucoes_usuario.strip():
            instrucoes_adicionais = (
                "\n\n### INSTRU√á√ïES ADICIONAIS DO USU√ÅRIO:\n" 
                + instrucoes_usuario.strip() + "\n"
            )

        if on_progress:
            on_progress("‚úçÔ∏è Montando prompt da senten√ßa...")

        prompt = f"""
            ### CONTEXTO
            Voc√™ √© um juiz especializado na elabora√ß√£o de senten√ßas. Com base no relat√≥rio do processo e nos documentos de refer√™ncia fornecidos, voc√™ deve gerar uma senten√ßa judicial completa. Siga rigorosamente a estrutura e requisitos abaixo, mas N√ÉO inclua os t√≠tulos das se√ß√µes (como 'Fundamenta√ß√£o', 'M√©rito', 'Dispositivo', etc.) na resposta final. Apenas escreva o texto corrido da senten√ßa, respeitando a ordem l√≥gica das se√ß√µes, mas sem indicar seus t√≠tulos explicitamente. A seguir h√° exemplos de senten√ßas judiciais com relat√≥rio, fundamenta√ß√£o e dispositivo:

            {contexto}

            Agora, dado o NOVO RELAT√ìRIO abaixo, gere a fundamenta√ß√£o e o dispositivo:

            NOVO RELAT√ìRIO:
            {relatorio}
            {instrucoes_adicionais}
            ## ESTRUTURA DA SENTEN√áA

            ### 1. QUEST√ïES PRELIMINARES
            - Analise o processo e identifique se h√° quest√µes preliminares suscitadas na contesta√ß√£o (exemplo: in√©pcia da inicial, impugna√ß√£o ao valor da causa, falta de interesse de agir, prescri√ß√£o).
            - Se houver preliminares, desenvolva a fundamenta√ß√£o para cada uma delas separadamente.
            - Se n√£o houver preliminares, inicie com a frase: "Ausentes quest√µes preliminares, passo ao m√©rito."

            ### 2. M√âRITO
            - Inicie afirmando claramente o(s) fato(s) que constitui(em) a causa de pedir do autor.
            - Em seguida, apresente o principal argumento do r√©u em sua defesa.
            - Desenvolva a fundamenta√ß√£o com base nos documentos de refer√™ncia, analisando:
            - Os fatos comprovados nos autos
            - As provas produzidas
            - A legisla√ß√£o aplic√°vel
            - A jurisprud√™ncia pertinente
            - A doutrina relevante

            #### REGRAS IMPORTANTES PARA A FUNDAMENTA√á√ÉO:
            - As cita√ß√µes de lei, doutrina ou jurisprud√™ncia devem ser reproduzidas EXATAMENTE como constam nos documentos de refer√™ncia, sem altera√ß√µes.
            - A argumenta√ß√£o deve ser coerente, l√≥gica e completa.
            - Utilize linguagem t√©cnica-jur√≠dica apropriada.
            - Analise todos os pedidos formulados na inicial.

            ### 3. DISPOSITIVO
            - Elabore o dispositivo da senten√ßa, decidindo sobre todos os pedidos.
            - Fixe os honor√°rios advocat√≠cios conforme crit√©rios do art. 85 do CPC.

            ### 4. CONCLUS√ÉO OBRIGAT√ìRIA
            Ap√≥s o dispositivo e a condena√ß√£o em honor√°rios, encerre a senten√ßa com EXATAMENTE o seguinte texto, sem nenhuma altera√ß√£o:

            "Opostos embargos de declara√ß√£o com efeito modificativo, intime-se a parte embargada para, querendo, manifestar-se no prazo de 05 (cinco) dias. (art. 1.023, ¬ß 2¬∫, do CPC/2015), e decorrido o prazo, com ou sem manifesta√ß√£o, voltem conclusos. 
            
            Na hip√≥tese de interposi√ß√£o de recurso de apela√ß√£o, intime-se a parte apelada para apresentar contrarraz√µes (art. 1010, ¬ß1¬∫, do CPC/2015). Havendo alega√ß√£o ‚Äì em sede de contrarraz√µes - de quest√µes resolvidas na fase de conhecimento as quais n√£o comportaram agravo de instrumento, intime-se a parte adversa (recorrente) para, em 15 (quinze) dias, manifestar-se a respeito delas (art. 1.009, ¬ß¬ß 1¬∫ e 2¬∫, do CPC/2015). Havendo interposi√ß√£o de apela√ß√£o adesiva, intime-se a parte apelante para contrarraz√µes, no prazo de 15 (quinze) dias (art. 1010, ¬ß2¬∫, do CPC/2015). Em seguida, com ou sem resposta, sigam os autos ao e. Tribunal de Justi√ßa do Estado de Pernambuco, com os cumprimentos deste Ju√≠zo (art. 1010, ¬ß3¬∫, do CPC/2015).
            
            Ap√≥s o tr√¢nsito em julgado, nada mais sendo requerido, arquivem-se os autos, com as cautelas de estilo, independentemente de nova determina√ß√£o.
            
            Comunica√ß√µes processuais necess√°rias.
            
            Cumpra-se.
            Recife-PE, data da assinatura digital.

            Maria Bet√¢nia Martins da Hora
            
            Ju√≠za de Direito"

            ## INSTRU√á√ïES FINAIS
            - Leia atentamente o relat√≥rio e todos os documentos de refer√™ncia antes de iniciar a reda√ß√£o.
            - Siga rigorosamente a estrutura indicada.
            - Certifique-se de que o texto final est√° coeso, coerente e tecnicamente preciso.
            - N√£o omita nenhum dos elementos obrigat√≥rios da senten√ßa.
            - As cita√ß√µes de leis, doutrina e jurisprud√™ncia devem ser exatamente iguais √†s dos documentos de refer√™ncia.

            """
        if on_progress:
            on_progress("üéØ Gerando senten√ßa...")
        resultado = _call_llm(prompt, on_progress)
        if on_progress:
            on_progress("‚úÖ Senten√ßa gerada com sucesso!")
        return resultado

    except Exception as e:
        error_msg = f"Erro na gera√ß√£o da senten√ßa: {e}"
        print(error_msg)
        if on_progress:
            on_progress(f"‚ùå {error_msg}")
        return f"Erro ao gerar senten√ßa: {e}"
